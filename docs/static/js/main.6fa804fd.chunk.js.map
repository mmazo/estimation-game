{"version":3,"sources":["components/story/Story.js","components/story/StoryItem.js","components/partition/Partition.js","components/partition/PartitionItem.js","components/backlog/UploadMultipleBacklogItems.js","components/backlog/BacklogUploadDialogue.js","App.js","serviceWorker.js","index.js"],"names":["Story","_ref","story","React","createElement","className","id","storyPoints","dots","i","immaturityLevel","push","key","renderMaturityLevelDots","title","StoryItem","_createClass","_classCallCheck","this","type","index","undefined","previousStoryPoints","previousPositionIndex","Partition","partition","size","PartitionItem","UploadMultipleBacklogItems","onAdd","_useState","useState","_useState2","_slicedToArray","stories","setStories","textarea","useRef","useEffect","current","focus","Form","onSubmit","e","preventDefault","ret","lines","split","_loop","bi","number","splice","join","filter","item","length","Group","controlId","Label","Control","as","ref","rows","value","onChange","target","placeholder","Button","variant","disabled","BacklogUploadDialogue","show","setShow","handleClose","Fragment","onClick","Modal","onHide","Header","closeButton","Title","Body","items","App","backlog","setBacklog","_useState3","_useState4","estimationTools","setEstimationTools","_useState5","_useState6","estimationList","setEstimationList","reEstimate","modList","currentPartitionSize","reEstimateStoryPoints","onlyStoriesList","_toConsumableArray","reEstimateImmaturityLevel","ReactSortable","list","setList","group","animation","map","backlogItems","estimationItems","onlyNewItems","backlogItem","estimationItem","concat","addItemsToBacklog","resp","fileDownload","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fa804fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Story.css';\r\n\r\n/**\r\n * Represents single story\r\n * @param story: StoryItem {id, type, storyPoints, title, immaturityLevel}\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Story({story}) {\r\n\r\n    const renderMaturityLevelDots = () => {\r\n        let dots = [];\r\n        for(let i = 0; i < story.immaturityLevel; i++) {\r\n            dots.push(<div key={i} className={'story-immaturity-level-dot'}></div>);\r\n        }\r\n        return dots;\r\n    }\r\n\r\n    return(\r\n        <div className={'story'}>\r\n            <div className={'story-header'}>\r\n                <div className={'story-id'}>{story.id}</div>\r\n                <div className={'story-points'}>Points: {story.storyPoints}</div>\r\n                <div className={'story-immaturity-level'}>{renderMaturityLevelDots()}</div>\r\n            </div>\r\n            <div className={'story-title'}>{story.title}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Story;\r\n","const TYPE_STORY_ITEM = 'STORY_ITEM';\r\n\r\nclass StoryItem {\r\n    constructor(id, title) {\r\n        this.type = TYPE_STORY_ITEM\r\n        this.id = id;\r\n        this.storyPoints = 0;\r\n        this.immaturityLevel = 0;\r\n        this.title = title;\r\n        this.index = undefined;\r\n        this.previousStoryPoints = undefined;\r\n        this.previousPositionIndex = undefined;\r\n    }\r\n}\r\n\r\nexport { StoryItem as default, TYPE_STORY_ITEM };\r\n","import React from 'react';\r\nimport './Partition.css';\r\n\r\n/**\r\n *\r\n * @param partition {id, type, size}\r\n * @returns {*}\r\n * @constructor\r\n */\r\nfunction Partition({partition}) {\r\n    return(\r\n        <div className={'partition'}>\r\n            <div className={'partition-size'}>{partition.size}</div>\r\n        </div>);\r\n}\r\n\r\nexport default Partition;\r\n","const TYPE_PARTITION_ITEM = 'type_partition_item';\r\n\r\nclass PartitionItem {\r\n    constructor(size) {\r\n        this.id = size;\r\n        this.type = TYPE_PARTITION_ITEM;\r\n        this.size = size;\r\n    }\r\n}\r\n\r\nexport {PartitionItem as default, TYPE_PARTITION_ITEM};\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport StoryItem from \"../story/StoryItem\";\r\n\r\nfunction UploadMultipleBacklogItems({onAdd}) {\r\n\r\n    const [stories, setStories] = useState('');\r\n    const textarea = useRef();\r\n\r\n    useEffect(() => {\r\n        textarea.current.focus();\r\n    },[]);\r\n\r\n    function submit(e) {\r\n        e.preventDefault();\r\n        const ret = [];\r\n        const lines = stories.split('\\n');\r\n        for(let i = 0;i < lines.length;i++) {\r\n            if (lines[i] !== '' && lines[i] !== ' ') {\r\n                const bi = lines[i].split(' ');\r\n                const number = bi[0];\r\n                bi.splice(0,1);\r\n                const title = bi.join(' ');\r\n                if (number && title && ret.filter(item => item.id === number).length === 0) {\r\n                    ret.push(new StoryItem(number, title));\r\n                }\r\n            }\r\n        }\r\n        onAdd(ret);\r\n    }\r\n\r\n    return(<Form onSubmit={submit}>\r\n        <Form.Group controlId=\"multipleStories\">\r\n            <Form.Label>Stories</Form.Label>\r\n            <Form.Control as=\"textarea\" ref={textarea}\r\n                          rows=\"10\"\r\n                          value={stories}\r\n                          onChange={(e) => setStories(e.target.value)}\r\n                          placeholder={'STORY_NUMBER_1 Story title 1\\nSTORY_NUMBER_2 Story title 2\\nSTORY_NUMBER_3 Story title 3\\n...'} />\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type=\"submit\" disabled={stories === ''}>Add</Button>\r\n    </Form>);\r\n}\r\n\r\nexport { UploadMultipleBacklogItems as default };\r\n","import React, {useState} from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport UploadMultipleBacklogItems from \"./UploadMultipleBacklogItems\";\r\n\r\nfunction BacklogUploadDialogue({onAdd}) {\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const handleAdd = (items) => {\r\n        onAdd(items);\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>Add stories from backlog</Button>\r\n            <Modal show={show} onHide={handleClose} size={'xl'}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add stories for estimation game</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <UploadMultipleBacklogItems onAdd={handleAdd} />\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BacklogUploadDialogue;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport {ReactSortable} from \"react-sortablejs\";\r\nimport Story from \"./components/story/Story\";\r\nimport {TYPE_STORY_ITEM} from \"./components/story/StoryItem\";\r\nimport Partition from \"./components/partition/Partition\";\r\nimport PartitionItem, {TYPE_PARTITION_ITEM} from \"./components/partition/PartitionItem\";\r\nimport BacklogUploadDialogue from \"./components/backlog/BacklogUploadDialogue\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport fileDownload from \"js-file-download\";\r\n\r\nfunction App() {\r\n  const [backlog, setBacklog] = useState([]);\r\n\r\n  const [estimationTools, setEstimationTools] = useState([\r\n      new PartitionItem(1),\r\n      new PartitionItem(2),\r\n      new PartitionItem(3),\r\n      new PartitionItem(5),\r\n      new PartitionItem(8),\r\n      new PartitionItem(13),\r\n      new PartitionItem(21)\r\n  ]);\r\n\r\n  const [estimationList, setEstimationList] = useState([]);\r\n\r\n  function reEstimate(modList) {\r\n      if (modList) {\r\n          reEstimateStoryPoints(modList);\r\n          reEstimateImmaturityLevel(modList);\r\n          setEstimationList(modList);\r\n      }\r\n  }\r\n\r\n  function reEstimateStoryPoints(modList) {\r\n      let currentPartitionSize = 0;\r\n      for (let i = 0; i < modList.length; i++) {\r\n          if(modList[i].type === TYPE_PARTITION_ITEM) {\r\n              currentPartitionSize = modList[i].size;\r\n          } else if (modList[i].type === TYPE_STORY_ITEM) {\r\n              // re-estimate story points\r\n              modList[i].storyPoints = currentPartitionSize;\r\n              // remember current overall position\r\n              modList[i].index = i;\r\n          }\r\n      }\r\n  }\r\n\r\n  function reEstimateImmaturityLevel(modList) {\r\n      const onlyStoriesList = [...modList].filter(item => item.type !== TYPE_PARTITION_ITEM);\r\n      for (let i = 0; i < onlyStoriesList.length; i++) {\r\n          // re-estimate immaturity level\r\n          if (onlyStoriesList[i].previousStoryPoints &&\r\n              onlyStoriesList[i].previousStoryPoints !== onlyStoriesList[i].storyPoints &&\r\n              onlyStoriesList[i].previousPositionIndex &&\r\n              onlyStoriesList[i].previousPositionIndex !== i) {\r\n              onlyStoriesList[i].immaturityLevel = onlyStoriesList[i].immaturityLevel + 1;\r\n          }\r\n          // remember current estimation for next re-estimation\r\n          onlyStoriesList[i].previousStoryPoints = onlyStoriesList[i].storyPoints;\r\n          onlyStoriesList[i].previousPositionIndex = i;\r\n\r\n          // save the changes\r\n          if (modList[onlyStoriesList[i].index]) {\r\n              modList[onlyStoriesList[i].index] = onlyStoriesList[i];\r\n          }\r\n      }\r\n  }\r\n\r\n  function addItemsToBacklog(items, backlogItems, estimationItems) {\r\n      let onlyNewItems = items.filter(item => {\r\n          return backlogItems.filter(backlogItem => backlogItem.id === item.id).length === 0;\r\n      });\r\n      onlyNewItems = onlyNewItems.filter(item => {\r\n          return estimationItems.filter(estimationItem => estimationItem.id === item.id).length === 0;\r\n      });\r\n      setBacklog(backlogItems.concat(onlyNewItems));\r\n  }\r\n\r\n  function downloadEstimatedItems() {\r\n      const resp = [];\r\n      for(let i = 0; i < estimationList.length; i++) {\r\n          if (estimationList[i].type === TYPE_STORY_ITEM) {\r\n              resp.push(estimationList[i].id + ': ' + estimationList[i].storyPoints + ' Points. ' + estimationList[i].title);\r\n          }\r\n      }\r\n      fileDownload(resp.join('\\n'), 'estimated_stories.txt');\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className={'estimation-area'}>\r\n            <ReactSortable list={estimationList}\r\n                           setList={(value) => reEstimate(value)}\r\n                           group={'estimation'}\r\n                           className={'estimation-list'}\r\n                           animation={200}>\r\n                {estimationList.map(item => (item.type === TYPE_STORY_ITEM ? <Story key={item.id} story={item} /> : <Partition key={item.id} partition={item} />))}\r\n            </ReactSortable>\r\n        </div>\r\n        <div className={'estimation-tool-belt'}>\r\n            <div className={'partitions-wrapper'}>\r\n                <ReactSortable list={estimationTools}\r\n                               setList={(value) => {setEstimationTools(value);}}\r\n                               group={'estimation'}\r\n                               className={'estimation-tools'}\r\n                               animation={200}>\r\n                    {estimationTools.map(item => (<Partition key={item.id} partition={item} />))}\r\n                </ReactSortable>\r\n            </div>\r\n            <div className={'backlog-wrapper'}>\r\n                <ReactSortable list={backlog}\r\n                               setList={(value) => {setBacklog(value);}}\r\n                               group={'estimation'}\r\n                               className={'backlog-list'}\r\n                               animation={200}>\r\n                    {backlog.map(item => (<Story key={item.id} story={item} />))}\r\n                </ReactSortable>\r\n            </div>\r\n            <div className={'backlog-actions-wrapper'}>\r\n                <BacklogUploadDialogue onAdd={(items) => addItemsToBacklog(items, backlog, estimationList)}/>\r\n                <Button disabled={estimationList.length === 0} onClick={downloadEstimatedItems}>Save estimated stories</Button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}